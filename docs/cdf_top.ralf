system cdf_top {
    bytes 4;
    block cdf_Probe_P_sram0_main_Probe @0x0 {
        bytes 4;
        register cdf_Probe_P_sram0_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hea5d7a;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram0_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram0_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram0_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram1_main_Probe @0x400 {
        bytes 4;
        register cdf_Probe_P_sram1_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h31e9f7;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram1_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram1_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram1_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram2_main_Probe @0x800 {
        bytes 4;
        register cdf_Probe_P_sram2_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h3b344e;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram2_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram2_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram2_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram3_main_Probe @0xC00 {
        bytes 4;
        register cdf_Probe_P_sram3_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h686354;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram3_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram3_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram3_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram4_main_Probe @0x1000 {
        bytes 4;
        register cdf_Probe_P_sram4_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hd8bc46;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram4_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram4_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram4_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram5_main_Probe @0x1400 {
        bytes 4;
        register cdf_Probe_P_sram5_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hdcb8b4;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram5_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram5_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram5_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram6_main_Probe @0x1800 {
        bytes 4;
        register cdf_Probe_P_sram6_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h2ee140;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram6_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram6_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram6_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_P_sram7_main_Probe @0x1C00 {
        bytes 4;
        register cdf_Probe_P_sram7_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hc72b42;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_P_sram7_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_FilterLut @0x14 {
            bytes 4;
            field FILTERLUT @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register FilterLut contains a look-up table that is used to combine filter outputs in order to trace packets. Packet tracing is enabled when the FilterLut bit of index (FNout ... F0out) is equal to 1.The number of bits in register FilterLut is determined by the setting for parameter nFilter, calculated as 2**nFilter.When parameter nFilter is set to None, FilterLut is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_TraceAlarmEn @0x18 {
            bytes 4;
            field TRACEALARMEN @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmEn controls which lookup table or filter can set the TraceAlarm signal output once the trace alarm status is set. The number of bits in register TraceAlarmEn is determined by the value set for parameter nFilter + 1.Bit nFilter controls the lookup table output, and bits nFilter:0 control the corresponding filter output. When parameter nFilter is set to None, TraceAlarmEn is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_TraceAlarmStatus @0x1C {
            bytes 4;
            field TRACEALARMSTATUS @'h0 {
                bits 5;
                access ro;
                hard_reset 'h0;
                doc {
                    Register TraceAlarmStatus is a read-only register that indicates which lookup table or filter has been matched by a packet, independently of register TraceAlarmEn bit configuration. The number of bits in TraceAlarmStatus is determined by the value set for parameter nFilter + 1.When nFilter is set to None, TraceAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_TraceAlarmClr @0x20 {
            bytes 4;
            field TRACEALARMCLR @'h0 {
                bits 5;
                access w1c;
                hard_reset 'h0;
                doc {
                    Setting a bit to 1 in register TraceAlarmClr clears the corresponding bit in register TraceAlarmStatus.The number of bits in register TraceAlarmClr is equal to (nFilter + 1). When nFilter is set to 0, TraceAlarmClr is reserved.NOTE  The written value is not stored in TraceAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 32;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_01 @0x40 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_RouteIdBase @0x44 {
            bytes 4;
            field FILTERS_0_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_RouteIdMask @0x48 {
            bytes 4;
            field FILTERS_0_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_AddrBase_Low @0x4C {
            bytes 4;
            field FILTERS_0_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_02 @0x50 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_WindowSize @0x54 {
            bytes 4;
            field FILTERS_0_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_03 @0x58 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_04 @0x5C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_Opcode @0x60 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_Status @0x64 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_Length @0x68 {
            bytes 4;
            field FILTERS_0_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_0_Urgency @0x6C {
            bytes 4;
            field FILTERS_0_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_05 @0x70 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_06 @0x74 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_07 @0x78 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_08 @0x7C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_RouteIdBase @0x80 {
            bytes 4;
            field FILTERS_1_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_RouteIdMask @0x84 {
            bytes 4;
            field FILTERS_1_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_AddrBase_Low @0x88 {
            bytes 4;
            field FILTERS_1_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_09 @0x8C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_WindowSize @0x90 {
            bytes 4;
            field FILTERS_1_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_10 @0x94 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_11 @0x98 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_Opcode @0x9C {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_Status @0xA0 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_Length @0xA4 {
            bytes 4;
            field FILTERS_1_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_1_Urgency @0xA8 {
            bytes 4;
            field FILTERS_1_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_12 @0xAC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_13 @0xB0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_14 @0xB4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_15 @0xB8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_RouteIdBase @0xBC {
            bytes 4;
            field FILTERS_2_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_RouteIdMask @0xC0 {
            bytes 4;
            field FILTERS_2_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_AddrBase_Low @0xC4 {
            bytes 4;
            field FILTERS_2_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_16 @0xC8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_WindowSize @0xCC {
            bytes 4;
            field FILTERS_2_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_17 @0xD0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_18 @0xD4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_Opcode @0xD8 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_Status @0xDC {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_Length @0xE0 {
            bytes 4;
            field FILTERS_2_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_2_Urgency @0xE4 {
            bytes 4;
            field FILTERS_2_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_19 @0xE8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_20 @0xEC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_21 @0xF0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_22 @0xF4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_RouteIdBase @0xF8 {
            bytes 4;
            field FILTERS_3_ROUTEIDBASE @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdBase contains the RouteId-lsbFilterRouteId bits base used to filter packets.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_RouteIdMask @0xFC {
            bytes 4;
            field FILTERS_3_ROUTEIDMASK @'h0 {
                bits 16;
                access rw;
                hard_reset 'h0;
                doc {
                    Register RouteIdMask contains the RouteId-lsbFilterRouteId mask used to filter packets. A packet is a candidate when packet.RouteId>>lsbFilterRouteId & RouteIdMask = RouteIdBase & RouteIdMask.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_AddrBase_Low @0x100 {
            bytes 4;
            field FILTERS_3_ADDRBASE_LOW @'h0 {
                bits 30;
                access rw;
                hard_reset 'h0;
                doc {
                    Address LSB register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_23 @0x104 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_WindowSize @0x108 {
            bytes 4;
            field FILTERS_3_WINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register WindowSize contains the encoded address mask used to filter packets. The effective Mask value is equal to ~(2max(WindowSize, packet.Len) - 1). A packet is a candidate when packet.Addr & Mask = AddrBase & Mask. This allows filteringof packets having an intersection with the AddrBase/WindowSize burst aligned region, even if the region is smaller than the packet.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_24 @0x10C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_25 @0x110 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_Opcode @0x114 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RD packets.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects WR packets.
                }
            }
            field LOCKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RDX-WR, RDL, WRC and Linked sequence.
                }
            }
            field URGEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects URG packets (urgency).
                }
            }
            doc {
                Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	Packet Probe register Opcode is a 4-bit register that selects candidate packets based on packet opcodes (0 disables the filter):
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_Status @0x118 {
            bytes 4;
            field REQEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects REQ status packets.
                }
            }
            field RSPEN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    Selects RSP and FAIL-CONT status packets.
                }
            }
            doc {
                Register Status is 2-bit register that selects candidate packets based on packet status.Register Status is 2-bit register that selects candidate packets based on packet status.
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_Length @0x11C {
            bytes 4;
            field FILTERS_3_LENGTH @'h0 {
                bits 4;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Length is 4-bit register that selects candidate packets if their number of bytes is less than or equal to 2**Length.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Filters_3_Urgency @0x120 {
            bytes 4;
            field FILTERS_3_URGENCY @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Urgency contains the minimum urgency level used to filter packets. A packet is a candidate when its socket urgency is greater than or equal to the urgency specified in the register.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_26 @0x124 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_27 @0x128 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_28 @0x12C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_29 @0x130 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_30 @0x134 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_31 @0x144 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_32 @0x148 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_33 @0x158 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_34 @0x15C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_2_Src @0x160 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_2_AlarmMode @0x164 {
            bytes 4;
            field COUNTERS_2_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_2_Val @0x168 {
            bytes 4;
            field COUNTERS_2_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_35 @0x16C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_36 @0x170 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_3_Src @0x174 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_3_AlarmMode @0x178 {
            bytes 4;
            field COUNTERS_3_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_3_Val @0x17C {
            bytes 4;
            field COUNTERS_3_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_37 @0x180 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_38 @0x184 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_4_Src @0x188 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_4_AlarmMode @0x18C {
            bytes 4;
            field COUNTERS_4_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_4_Val @0x190 {
            bytes 4;
            field COUNTERS_4_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_39 @0x194 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_40 @0x198 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_5_Src @0x19C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_5_AlarmMode @0x1A0 {
            bytes 4;
            field COUNTERS_5_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_5_Val @0x1A4 {
            bytes 4;
            field COUNTERS_5_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_41 @0x1A8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_42 @0x1AC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_6_Src @0x1B0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_6_AlarmMode @0x1B4 {
            bytes 4;
            field COUNTERS_6_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_6_Val @0x1B8 {
            bytes 4;
            field COUNTERS_6_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_43 @0x1BC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_44 @0x1C0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_7_Src @0x1C4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_7_AlarmMode @0x1C8 {
            bytes 4;
            field COUNTERS_7_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_7_Val @0x1CC {
            bytes 4;
            field COUNTERS_7_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_45 @0x1D0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_46 @0x1D4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_8_Src @0x1D8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_8_AlarmMode @0x1DC {
            bytes 4;
            field COUNTERS_8_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_8_Val @0x1E0 {
            bytes 4;
            field COUNTERS_8_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_47 @0x1E4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_48 @0x1E8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_9_Src @0x1EC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_9_AlarmMode @0x1F0 {
            bytes 4;
            field COUNTERS_9_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_9_Val @0x1F4 {
            bytes 4;
            field COUNTERS_9_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_49 @0x1F8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_50 @0x1FC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_10_Src @0x200 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_10_AlarmMode @0x204 {
            bytes 4;
            field COUNTERS_10_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_10_Val @0x208 {
            bytes 4;
            field COUNTERS_10_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_51 @0x20C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_52 @0x210 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_11_Src @0x214 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_11_AlarmMode @0x218 {
            bytes 4;
            field COUNTERS_11_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_11_Val @0x21C {
            bytes 4;
            field COUNTERS_11_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_53 @0x220 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_54 @0x224 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_12_Src @0x228 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_12_AlarmMode @0x22C {
            bytes 4;
            field COUNTERS_12_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_12_Val @0x230 {
            bytes 4;
            field COUNTERS_12_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_55 @0x234 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_56 @0x238 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_13_Src @0x23C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_13_AlarmMode @0x240 {
            bytes 4;
            field COUNTERS_13_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_13_Val @0x244 {
            bytes 4;
            field COUNTERS_13_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_57 @0x248 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_58 @0x24C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_14_Src @0x250 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_14_AlarmMode @0x254 {
            bytes 4;
            field COUNTERS_14_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_14_Val @0x258 {
            bytes 4;
            field COUNTERS_14_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_59 @0x25C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_60 @0x260 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_15_Src @0x264 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_15_AlarmMode @0x268 {
            bytes 4;
            field COUNTERS_15_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_15_Val @0x26C {
            bytes 4;
            field COUNTERS_15_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_61 @0x270 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_62 @0x274 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_16_Src @0x278 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_16_AlarmMode @0x27C {
            bytes 4;
            field COUNTERS_16_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_16_Val @0x280 {
            bytes 4;
            field COUNTERS_16_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_63 @0x284 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_64 @0x288 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_17_Src @0x28C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_17_AlarmMode @0x290 {
            bytes 4;
            field COUNTERS_17_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_17_Val @0x294 {
            bytes 4;
            field COUNTERS_17_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_65 @0x298 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_66 @0x29C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_18_Src @0x2A0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_18_AlarmMode @0x2A4 {
            bytes 4;
            field COUNTERS_18_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_18_Val @0x2A8 {
            bytes 4;
            field COUNTERS_18_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_67 @0x2AC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_68 @0x2B0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_19_Src @0x2B4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_19_AlarmMode @0x2B8 {
            bytes 4;
            field COUNTERS_19_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_19_Val @0x2BC {
            bytes 4;
            field COUNTERS_19_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_69 @0x2C0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_70 @0x2C4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_20_Src @0x2C8 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_20_AlarmMode @0x2CC {
            bytes 4;
            field COUNTERS_20_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_20_Val @0x2D0 {
            bytes 4;
            field COUNTERS_20_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_71 @0x2D4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_72 @0x2D8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_21_Src @0x2DC {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_21_AlarmMode @0x2E0 {
            bytes 4;
            field COUNTERS_21_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_21_Val @0x2E4 {
            bytes 4;
            field COUNTERS_21_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_73 @0x2E8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_74 @0x2EC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_22_Src @0x2F0 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_22_AlarmMode @0x2F4 {
            bytes 4;
            field COUNTERS_22_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_22_Val @0x2F8 {
            bytes 4;
            field COUNTERS_22_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_75 @0x2FC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_76 @0x300 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_23_Src @0x304 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_23_AlarmMode @0x308 {
            bytes 4;
            field COUNTERS_23_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_23_Val @0x30C {
            bytes 4;
            field COUNTERS_23_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_77 @0x310 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_78 @0x314 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_24_Src @0x318 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_24_AlarmMode @0x31C {
            bytes 4;
            field COUNTERS_24_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_24_Val @0x320 {
            bytes 4;
            field COUNTERS_24_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_79 @0x324 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_80 @0x328 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_25_Src @0x32C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_25_AlarmMode @0x330 {
            bytes 4;
            field COUNTERS_25_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_25_Val @0x334 {
            bytes 4;
            field COUNTERS_25_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_81 @0x338 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_82 @0x33C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_26_Src @0x340 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_26_AlarmMode @0x344 {
            bytes 4;
            field COUNTERS_26_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_26_Val @0x348 {
            bytes 4;
            field COUNTERS_26_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_83 @0x34C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_84 @0x350 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_27_Src @0x354 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_27_AlarmMode @0x358 {
            bytes 4;
            field COUNTERS_27_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_27_Val @0x35C {
            bytes 4;
            field COUNTERS_27_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_85 @0x360 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_86 @0x364 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_28_Src @0x368 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_28_AlarmMode @0x36C {
            bytes 4;
            field COUNTERS_28_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_28_Val @0x370 {
            bytes 4;
            field COUNTERS_28_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_87 @0x374 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_88 @0x378 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_29_Src @0x37C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_29_AlarmMode @0x380 {
            bytes 4;
            field COUNTERS_29_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_29_Val @0x384 {
            bytes 4;
            field COUNTERS_29_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_89 @0x388 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_90 @0x38C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_30_Src @0x390 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_30_AlarmMode @0x394 {
            bytes 4;
            field COUNTERS_30_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_30_Val @0x398 {
            bytes 4;
            field COUNTERS_30_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_91 @0x39C {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_92 @0x3A0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_31_Src @0x3A4 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_31_AlarmMode @0x3A8 {
            bytes 4;
            field COUNTERS_31_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Counters_31_Val @0x3AC {
            bytes 4;
            field COUNTERS_31_VAL @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_93 @0x3B0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_94 @0x3B4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_95 @0x3B8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_96 @0x3BC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_97 @0x3C0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_98 @0x3C4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_99 @0x3C8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_100 @0x3CC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_101 @0x3D0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_102 @0x3D4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_103 @0x3D8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_104 @0x3DC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_105 @0x3E0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_106 @0x3E4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_107 @0x3E8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_108 @0x3EC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_109 @0x3F0 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_110 @0x3F4 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_111 @0x3F8 {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_P_sram7_main_Probe_Reserved_112 @0x3FC {
            bytes 4;
            field cdf_Probe_P_sram7_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_cdma0_main_Probe @0x2000 {
        bytes 4;
        register cdf_Probe_T_cdma0_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h2b3323;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_cdma0_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_cdma1_main_Probe @0x2400 {
        bytes 4;
        register cdf_Probe_T_cdma1_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h15e8d4;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_cdma1_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip0_main_Probe @0x2800 {
        bytes 4;
        register cdf_Probe_T_sip0_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hb19c0d;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip0_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip0_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip1_main_Probe @0x2C00 {
        bytes 4;
        register cdf_Probe_T_sip1_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h55a5bb;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip1_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip1_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip2_main_Probe @0x3000 {
        bytes 4;
        register cdf_Probe_T_sip2_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h37a38f;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip2_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip2_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip3_main_Probe @0x3400 {
        bytes 4;
        register cdf_Probe_T_sip3_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hf4fea9;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip3_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip3_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip4_main_Probe @0x3800 {
        bytes 4;
        register cdf_Probe_T_sip4_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hb74d89;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip4_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip4_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip5_main_Probe @0x3C00 {
        bytes 4;
        register cdf_Probe_T_sip5_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h93a867;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip5_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip5_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip6_main_Probe @0x4000 {
        bytes 4;
        register cdf_Probe_T_sip6_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h90dce2;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip6_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip6_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip7_main_Probe @0x4400 {
        bytes 4;
        register cdf_Probe_T_sip7_main_Probe_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h6;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hbf5430;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_MainCtl @0x8 {
            bytes 4;
            field ERREN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field ErrEn enables the probe to send on the ObsTx output any packet with Error status, independently of filtering mechanisms, thus constituting a simple supplementary global filter.
                }
            }
            field TRACEEN @'h1 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register field TraceEn enables the probe to send filtered packets (Trace) on the ObsTx observation output.
                }
            }
            field PAYLOADEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field PayloadEn, when set to 1, enables traces to contain headers and payload. When set ot 0, only headers are reported.
                }
            }
            field STATEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field StatEn enables statistics profiling. The probe sendS statistics results to the output for signal ObsTx. All statistics counters are cleared when the StatEn bit goes from 0 to 1. When set to 0, counters are disabled.
                }
            }
            field ALARMEN @'h4 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field AlarmEn enables the probe to collect alarm-related information. When the register field bit is null, both TraceAlarm and StatAlarm outputs are driven to 0.
                }
            }
            field STATCONDDUMP @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set, register field StatCondDump enables the dump of a statistics frame to the range of counter values set for registers StatAlarmMin, StatAlarmMax, and AlarmMode. This field also renders register StatAlarmStatus inoperative. When parameter statisticsCounterAlarm is set to False, the StatCondDump register bit is reserved.
                }
            }
            field INTRUSIVEMODE @'h6 {
                access ro;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntrusiveMode enables trace operation in Intrusive flow-control mode. When set to 0, the register  enables trace operation in Overflow flow-control mode
                }
            }
            field FILTBYTEALWAYSCHAINABLEEN @'h7 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 0, filters are mapped to all statistic counters when counting bytes or enabled bytes. Therefore, only filter events mapped to even counters can be counted using a pair of chained counters.When set to 1, filters are mapped only to even statistic counters when counting bytes or enabled bytes. Thus events from any filter can be counted using a pair of chained counters.
                }
            }
            doc {
                Register MainCtl contains probe global control bits. The register has seven bit fields:Register MainCtl contains probe global control bits. The register has seven bit fields:
            }
        }
        register cdf_Probe_T_sip7_main_Probe_CfgCtl @0xC {
            bytes 4;
            field GLOBALEN @'h0 {
                access rw;
                hard_reset 'h0;
            }
            field ACTIVE @'h1 {
                access ro;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatPeriod @0x24 {
            bytes 4;
            field STATPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatPeriod is a 5-bit register that sets a period, within a range of 2 cycles to 2 gigacycles, during which statistics are collected before being dumped automatically. Setting the register implicitly enables automatic mode operation for statistics collection. The period is calculated with the formula: N_Cycle = 2**StatPeriodWhen register StatPeriod is set to its default value 0, automatic dump mode is disabled, and register StatGo is activated for manual mode operation. Note: When parameter statisticsCollection is set to False, StatPeriod is reserved.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatGo @0x28 {
            bytes 4;
            field STATGO @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Writing a 1 to the 1-bit pulse register StatGo generates a statistics dump.The register is active when statistics collection operates in manual mode, that is, when register StatPeriod is set to 0.NOTE  The written value is not stored in StatGo. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatAlarmMin @0x2C {
            bytes 4;
            field STATALARMMIN @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMin contains the minimum count value used in statistics alarm comparisons. The number of bits is equal to twice the value set forparameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMin is reserved.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatAlarmMax @0x30 {
            bytes 4;
            field STATALARMMAX @'h0 {
                bits 24;
                access rw;
                hard_reset 'h0;
                doc {
                    Register StatAlarmMax contains the maximum count value used in statistics alarm comparisons.The number of bits is equal to twice the value set for parameter wStatisticsCounter. When parameter statisticsCounterAlarm is set to False, StatAlarmMax is reserved.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatAlarmStatus @0x34 {
            bytes 4;
            field STATALARMSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Register StatAlarmStatus is a read-only 1-bit register indicating that at least one statistics counter has exceeded the programmed values for registers StatAlarmMin or StatAlarmMax. Output signal StatAlarm is equal to the values stored in register MainCtl fields StatAlarmStatus and AlarmEn. When parameter statisticsCounterAlarm is set to False, StatAlarmStatus is reserved.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatAlarmClr @0x38 {
            bytes 4;
            field STATALARMCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register StatAlarmClr is a 1-bit register. Writing a 1 to this register clears the StatAlarmStatus register bit.When parameter statisticsCounterAlarm is set to False, StatAlarmClr is reserved.NOTE  The written value is not stored in StatAlarmClr. A read always returns 0.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_StatAlarmEn @0x3C {
            bytes 4;
            field STATALARMEN @'h0 {
                access rw;
                hard_reset 'h1;
                doc {
                    Register StatAlarmEn is a 1-bit register. When set to 0 it masks StatAlarm and CtiTrigOut(1) signal interrupts.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_05 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_06 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_07 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_08 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_09 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_10 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_11 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_12 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_13 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_14 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_15 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_16 @0x6C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_17 @0x70 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_18 @0x74 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_19 @0x78 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_20 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_21 @0x80 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_22 @0x84 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_23 @0x88 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_24 @0x8C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_25 @0x90 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_26 @0x94 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_27 @0x98 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_27 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_28 @0x9C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_28 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_29 @0xA0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_29 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_30 @0xA4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_30 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_31 @0xA8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_31 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_32 @0xAC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_32 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_33 @0xB0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_33 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_34 @0xB4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_34 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_35 @0xB8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_35 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_36 @0xBC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_36 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_37 @0xC0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_37 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_38 @0xC4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_38 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_39 @0xC8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_39 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_40 @0xCC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_40 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_41 @0xD0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_41 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_42 @0xD4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_42 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_43 @0xD8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_43 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_44 @0xDC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_44 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_45 @0xE0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_45 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_46 @0xE4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_46 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_47 @0xE8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_47 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_48 @0xEC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_48 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_49 @0xF0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_49 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_50 @0xF4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_50 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_51 @0xF8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_51 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_52 @0xFC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_52 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_53 @0x100 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_53 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_54 @0x104 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_54 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_55 @0x108 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_55 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_56 @0x10C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_56 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_57 @0x110 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_57 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_58 @0x114 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_58 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_59 @0x118 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_59 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_60 @0x11C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_60 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_61 @0x120 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_61 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_62 @0x124 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_62 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_63 @0x128 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_63 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_64 @0x12C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_64 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_65 @0x130 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_65 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_66 @0x134 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_66 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Counters_0_Src @0x138 {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Counters_0_AlarmMode @0x13C {
            bytes 4;
            field COUNTERS_0_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Counters_0_Val @0x140 {
            bytes 4;
            field COUNTERS_0_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_67 @0x144 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_67 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_68 @0x148 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_68 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Counters_1_Src @0x14C {
            bytes 4;
            field INTEVENT @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, CYCLE = 1, IDLE = 2, XFER = 3, BUSY = 4, WAIT = 5, PKT = 6, LUT = 7, BYTE = 8, PRESS0 = 9, PRESS1 = 10, PRESS2 = 11, FILT0 = 12, FILT1 = 13, FILT2 = 14, FILT3 = 15, CHAIN = 16, LUT_BYTE_EN = 17, LUT_BYTE = 18, FILT_BYTE_EN = 19, FILT_BYTE = 20, PRESS3 = 21, PRESS4 = 22, PRESS5 = 23, PRESS6 = 24, RSV_0 = 25, RSV_1 = 26, RSV_2 = 27, RSV_3 = 28, RSV_4 = 29, RSV_5 = 30, RSV_6 = 31 };
                doc {
                    Internal packet event
                }
            }
            field EXTEVENT @'h5 {
                access rw;
                hard_reset 'h0;
                doc {
                    When greater than 0, the entire register value is used to select an external hardware event source. The index of the external event is equal to {ExtEvent,IntEvent}.
                }
            }
            doc {
                Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	Register CntSrc indicates the event source used to increment the counter. Unassigned values (non-existing Press level or ExtEvent index, or unimplemented Filter) are equivalent to OFF.
	
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Counters_1_AlarmMode @0x150 {
            bytes 4;
            field COUNTERS_1_ALARMMODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h0;
                enum { OFF = 0, MIN = 1, MAX = 2, MIN_MAX = 3 };
                doc {
                    Register AlarmMode is a 2-bit register that is present when parameter statisticsCounterAlarm is set to True. The register defines the statistics-alarm behavior of the counter.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Counters_1_Val @0x154 {
            bytes 4;
            field COUNTERS_1_VAL @'h0 {
                bits 12;
                access ro;
                hard_reset 'h0;
                doc {
                    Register Val is a read-only register that is always present. The register containsthe statistics counter value either pending StatAlarm output, or when statisticscollection is suspended subsequent to triggers or signal statSuspend.
                }
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_69 @0x158 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_69 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_70 @0x15C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_70 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_71 @0x160 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_71 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_72 @0x164 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_72 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_73 @0x168 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_73 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_74 @0x16C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_74 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_75 @0x170 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_75 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_76 @0x174 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_76 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_77 @0x178 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_77 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_78 @0x17C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_78 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_79 @0x180 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_79 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_80 @0x184 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_80 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_81 @0x188 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_81 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_82 @0x18C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_82 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_83 @0x190 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_83 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_84 @0x194 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_84 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_85 @0x198 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_85 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_86 @0x19C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_86 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_87 @0x1A0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_87 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_88 @0x1A4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_88 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_89 @0x1A8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_89 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_90 @0x1AC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_90 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_91 @0x1B0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_91 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_92 @0x1B4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_92 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_93 @0x1B8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_93 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_94 @0x1BC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_94 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_95 @0x1C0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_95 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_96 @0x1C4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_96 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_97 @0x1C8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_97 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_98 @0x1CC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_98 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_99 @0x1D0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_99 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_100 @0x1D4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_100 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_101 @0x1D8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_101 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_102 @0x1DC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_102 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_103 @0x1E0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_103 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_104 @0x1E4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_104 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_105 @0x1E8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_105 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_106 @0x1EC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_106 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_107 @0x1F0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_107 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_108 @0x1F4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_108 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_109 @0x1F8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_109 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_110 @0x1FC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_110 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_111 @0x200 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_111 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_112 @0x204 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_112 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_113 @0x208 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_113 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_114 @0x20C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_114 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_115 @0x210 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_115 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_116 @0x214 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_116 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_117 @0x218 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_117 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_118 @0x21C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_118 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_119 @0x220 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_119 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_120 @0x224 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_120 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_121 @0x228 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_121 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_122 @0x22C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_122 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_123 @0x230 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_123 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_124 @0x234 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_124 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_125 @0x238 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_125 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_126 @0x23C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_126 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_127 @0x240 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_127 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_128 @0x244 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_128 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_129 @0x248 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_129 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_130 @0x24C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_130 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_131 @0x250 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_131 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_132 @0x254 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_132 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_133 @0x258 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_133 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_134 @0x25C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_134 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_135 @0x260 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_135 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_136 @0x264 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_136 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_137 @0x268 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_137 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_138 @0x26C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_138 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_139 @0x270 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_139 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_140 @0x274 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_140 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_141 @0x278 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_141 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_142 @0x27C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_142 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_143 @0x280 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_143 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_144 @0x284 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_144 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_145 @0x288 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_145 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_146 @0x28C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_146 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_147 @0x290 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_147 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_148 @0x294 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_148 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_149 @0x298 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_149 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_150 @0x29C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_150 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_151 @0x2A0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_151 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_152 @0x2A4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_152 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_153 @0x2A8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_153 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_154 @0x2AC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_154 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_155 @0x2B0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_155 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_156 @0x2B4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_156 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_157 @0x2B8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_157 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_158 @0x2BC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_158 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_159 @0x2C0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_159 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_160 @0x2C4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_160 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_161 @0x2C8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_161 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_162 @0x2CC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_162 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_163 @0x2D0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_163 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_164 @0x2D4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_164 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_165 @0x2D8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_165 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_166 @0x2DC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_166 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_167 @0x2E0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_167 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_168 @0x2E4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_168 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_169 @0x2E8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_169 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_170 @0x2EC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_170 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_171 @0x2F0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_171 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_172 @0x2F4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_172 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_173 @0x2F8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_173 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_174 @0x2FC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_174 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_175 @0x300 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_175 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_176 @0x304 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_176 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_177 @0x308 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_177 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_178 @0x30C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_178 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_179 @0x310 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_179 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_180 @0x314 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_180 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_181 @0x318 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_181 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_182 @0x31C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_182 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_183 @0x320 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_183 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_184 @0x324 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_184 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_185 @0x328 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_185 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_186 @0x32C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_186 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_187 @0x330 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_187 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_188 @0x334 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_188 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_189 @0x338 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_189 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_190 @0x33C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_190 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_191 @0x340 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_191 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_192 @0x344 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_192 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_193 @0x348 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_193 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_194 @0x34C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_194 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_195 @0x350 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_195 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_196 @0x354 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_196 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_197 @0x358 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_197 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_198 @0x35C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_198 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_199 @0x360 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_199 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_200 @0x364 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_200 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_201 @0x368 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_201 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_202 @0x36C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_202 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_203 @0x370 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_203 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_204 @0x374 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_204 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_205 @0x378 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_205 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_206 @0x37C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_206 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_207 @0x380 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_207 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_208 @0x384 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_208 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_209 @0x388 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_209 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_210 @0x38C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_210 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_211 @0x390 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_211 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_212 @0x394 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_212 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_213 @0x398 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_213 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_214 @0x39C {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_214 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_215 @0x3A0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_215 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_216 @0x3A4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_216 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_217 @0x3A8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_217 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_218 @0x3AC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_218 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_219 @0x3B0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_219 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_220 @0x3B4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_220 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_221 @0x3B8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_221 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_222 @0x3BC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_222 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_223 @0x3C0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_223 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_224 @0x3C4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_224 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_225 @0x3C8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_225 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_226 @0x3CC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_226 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_227 @0x3D0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_227 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_228 @0x3D4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_228 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_229 @0x3D8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_229 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_230 @0x3DC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_230 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_231 @0x3E0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_231 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_232 @0x3E4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_232 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_233 @0x3E8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_233 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_234 @0x3EC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_234 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_235 @0x3F0 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_235 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_236 @0x3F4 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_236 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_237 @0x3F8 {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_237 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_Probe_Reserved_238 @0x3FC {
            bytes 4;
            field cdf_Probe_T_sip7_main_Probe_Reserved_238 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_cdma0_main_TransactionStatProfiler @0x5000 {
        bytes 4;
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hfefaad;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_cdma0_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_cdma1_main_TransactionStatProfiler @0x5080 {
        bytes 4;
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h20f235;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_cdma1_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip0_main_TransactionStatProfiler @0x5100 {
        bytes 4;
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h11bc19;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip0_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip1_main_TransactionStatProfiler @0x5180 {
        bytes 4;
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h2c49ee;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip1_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip2_main_TransactionStatProfiler @0x5200 {
        bytes 4;
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h68b16d;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip2_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip3_main_TransactionStatProfiler @0x5280 {
        bytes 4;
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h978355;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip3_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip4_main_TransactionStatProfiler @0x5300 {
        bytes 4;
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'ha3227f;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip4_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip5_main_TransactionStatProfiler @0x5380 {
        bytes 4;
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hcb60a;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip5_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip6_main_TransactionStatProfiler @0x5400 {
        bytes 4;
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'ha95451;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip6_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_Probe_T_sip7_main_TransactionStatProfiler @0x5480 {
        bytes 4;
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'ha;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hfaed54;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_En @0x8 {
            bytes 4;
            field EN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register En is a 1-bit register that enables the transaction probe counter unit.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode sets the counting mode per observed port. Each bit per observation port defines the incrementing mode. (Mode = 0 for Delay, Mode = 1 for Pending)
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_00 @0x10 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_01 @0x14 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_02 @0x18 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_03 @0x1C {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_04 @0x20 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_05 @0x24 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_06 @0x28 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Thresholds_0_0 @0x2C {
            bytes 4;
            field THRESHOLDS_0_0 @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    Register Thresholds_i_j contains the threshold index "0" that allows computation of threshold values.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_07 @0x30 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_08 @0x34 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_09 @0x38 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_10 @0x3C {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_11 @0x40 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_12 @0x44 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_13 @0x48 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_14 @0x4C {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_15 @0x50 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_16 @0x54 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_17 @0x58 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_18 @0x5C {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_19 @0x60 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_20 @0x64 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_21 @0x68 {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_OverflowStatus @0x6C {
            bytes 4;
            field OVERFLOWSTATUS @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Bit n of register OverflowStatus is set to 1 if a start event occurs on observed port n and eitherof the following conditions occurs: All tenure counters allocated to the port are already in use. No tenure lines have been allocated to the port. The number of bits in this register is equal to the value set for parameter nObservable.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_OverflowReset @0x70 {
            bytes 4;
            field OVERFLOWRESET @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Register OverflowReset is a pulse register that clears overflow status bits per observed port on each write access. OverflowReset = nObservable. Writing 0x2  clears the overflow status of observed port 1.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_PendingEventMode @0x74 {
            bytes 4;
            field PENDINGEVENTMODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register pendingEventMode is a 1-bit register that configures the pending event mode. When set to 0 (CYCLE), and when register mode is set to PENDING, the pending event is generated on each cycle when the counter is greater than zero.When set to 1 (STOP) the pending event is generated on each stop event.
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_PreScaler @0x78 {
            bytes 4;
            field PRESCALER @'h0 {
                bits 8;
                access rw;
                hard_reset 'h0;
                doc {
                    8Register Prescaler is an-bit pre-scaling register that accepts any pre-scaling value between 1 (default) and 256. If set to 0, pre-scaling is disabled. If set to any other supported value "n", the threshold counter value is divided by (n + 1).
                }
            }
        }
        register cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_22 @0x7C {
            bytes 4;
            field cdf_Probe_T_sip7_main_TransactionStatProfiler_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdma0_cdf_axi_I_main_TransactionStatFilter @0x6000 {
        bytes 4;
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h2f4187;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field cdma0_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdma1_cdf_axi_I_main_TransactionStatFilter @0x6080 {
        bytes 4;
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h4ceacf;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field cdma1_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip0_cdf_axi_I_main_TransactionStatFilter @0x6100 {
        bytes 4;
        register sip0_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'he4bb41;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip0_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip1_cdf_axi_I_main_TransactionStatFilter @0x6180 {
        bytes 4;
        register sip1_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h7b2234;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip1_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip2_cdf_axi_I_main_TransactionStatFilter @0x6200 {
        bytes 4;
        register sip2_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h79fe3c;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip2_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip3_cdf_axi_I_main_TransactionStatFilter @0x6280 {
        bytes 4;
        register sip3_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h9fb5d9;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip3_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip4_cdf_axi_I_main_TransactionStatFilter @0x6300 {
        bytes 4;
        register sip4_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hd5b943;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip4_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip5_cdf_axi_I_main_TransactionStatFilter @0x6380 {
        bytes 4;
        register sip5_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h4295a5;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip5_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip6_cdf_axi_I_main_TransactionStatFilter @0x6400 {
        bytes 4;
        register sip6_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hf17f7c;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip6_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip7_cdf_axi_I_main_TransactionStatFilter @0x6480 {
        bytes 4;
        register sip7_cdf_axi_I_main_TransactionStatFilter_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h9;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hba573b;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Mode @0x8 {
            bytes 4;
            field MODE @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register Mode is a 1-bit register that sets the filtering mode as follows: handshake Mode = 0 or latency Mode = 1.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_AddrBase_Low @0xC {
            bytes 4;
            field ADDRBASE_LOW @'h0 {
                bits 23;
                access rw;
                hard_reset 'h0;
                doc {
                    Address base LSB register.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_00 @0x10 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_AddrWindowSize @0x14 {
            bytes 4;
            field ADDRWINDOWSIZE @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    Register AddrWindowSize contains the encoded address mask used to filter packets: the effective Mask value is equal to ~(2**AddrWindowSize - 1). A packet is a candidate when ReqInfo.Addr & AddrMask = AddrBase & AddrMask.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_01 @0x18 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_02 @0x1C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Opcode @0x20 {
            bytes 4;
            field RDEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects RD requests.
                }
            }
            field WREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, selects WR requests.
                }
            }
            doc {
                This register selects candidate packets based on packet opcodes. (0 disables the filter):
	This register selects candidate packets based on packet opcodes. (0 disables the filter):
	
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_UserBase @0x24 {
            bytes 4;
            field USERBASE @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User base used to filter requests.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_UserMask @0x28 {
            bytes 4;
            field USERMASK @'h0 {
                bits 27;
                access rw;
                hard_reset 'h0;
                doc {
                    This register contains the User mask used to filter requests.
                }
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_03 @0x2C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_04 @0x30 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_05 @0x34 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_06 @0x38 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_07 @0x3C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_08 @0x40 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_09 @0x44 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_10 @0x48 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_11 @0x4C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_12 @0x50 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_13 @0x54 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_14 @0x58 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_15 @0x5C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_16 @0x60 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_17 @0x64 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_18 @0x68 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_19 @0x6C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_20 @0x70 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_21 @0x74 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_22 @0x78 {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_23 @0x7C {
            bytes 4;
            field sip7_cdf_axi_I_main_TransactionStatFilter_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_observer_main_AtbEndPoint @0x7000 {
        bytes 4;
        register cdf_observer_main_AtbEndPoint_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h7;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hb80dfa;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_observer_main_AtbEndPoint_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_observer_main_AtbEndPoint_AtbId @0x8 {
            bytes 4;
            field ATBID @'h0 {
                bits 7;
                access rw;
                hard_reset 'h1;
                doc {
                    ATB AtId
                }
            }
        }
        register cdf_observer_main_AtbEndPoint_AtbEn @0xC {
            bytes 4;
            field ATBEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    ATB Unit Enable
                }
            }
        }
        register cdf_observer_main_AtbEndPoint_SyncPeriod @0x10 {
            bytes 4;
            field SYNCPERIOD @'h0 {
                bits 5;
                access rw;
                hard_reset 'h0;
                doc {
                    ATB Synchro Period
                }
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_00 @0x14 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_01 @0x18 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_02 @0x1C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_03 @0x20 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_04 @0x24 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_05 @0x28 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_06 @0x2C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_07 @0x30 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_08 @0x34 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_09 @0x38 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_10 @0x3C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_11 @0x40 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_12 @0x44 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_13 @0x48 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_14 @0x4C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_15 @0x50 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_16 @0x54 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_17 @0x58 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_18 @0x5C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_19 @0x60 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_20 @0x64 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_21 @0x68 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_22 @0x6C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_23 @0x70 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_24 @0x74 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_25 @0x78 {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_25 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_AtbEndPoint_Reserved_26 @0x7C {
            bytes 4;
            field cdf_observer_main_AtbEndPoint_Reserved_26 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdf_observer_main_ErrorLogger_0 @0x7400 {
        bytes 4;
        register cdf_observer_main_ErrorLogger_0_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'hd;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h5c03ed;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_FaultEn @0x8 {
            bytes 4;
            field FAULTEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Set to 1 to enable output signal Fault. Fault asserted when ErrVld is 1.
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_ErrVld @0xC {
            bytes 4;
            field ERRVLD @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    1 indicates an error has been logged
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_ErrClr @0x10 {
            bytes 4;
            field ERRCLR @'h0 {
                access w1c;
                hard_reset 'h0;
                doc {
                    Set to 1 to clear ErrVld. NOTE The written value is not stored in ErrVld. A read always returns 0.
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_ErrLog0 @0x14 {
            bytes 4;
            field LOCK @'h0 {
                access ro;
                hard_reset 'h0;
                doc {
                    Lock
                }
            }
            field OPC @'h1 {
                bits 4;
                access ro;
                hard_reset 'h0;
                doc {
                    Opc
                }
            }
            field ERRCODE @'h8 {
                bits 3;
                access ro;
                hard_reset 'h0;
                doc {
                    ErrCode
                }
            }
            field LEN1 @'h10 {
                bits 11;
                access ro;
                hard_reset 'h0;
                doc {
                    Len1
                }
            }
            field FORMAT @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    NTTP transport protocol version
                }
            }
            doc {
                Stores NTTP packet header fields Lock, Opc, ErrCode, Len1 and indicates version of NTTP transport protocolStores NTTP packet header fields Lock, Opc, ErrCode, Len1 and indicates version of NTTP transport protocol
            }
        }
        register cdf_observer_main_ErrorLogger_0_ErrLog1 @0x18 {
            bytes 4;
            field ERRLOG1 @'h0 {
                bits 16;
                access ro;
                hard_reset 'h0;
                doc {
                    Stores NTTP packet header field RouteId (LSBs) of the logged error
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_00 @0x1C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_ErrLog3 @0x20 {
            bytes 4;
            field ERRLOG3 @'h0 {
                bits 30;
                access ro;
                hard_reset 'h0;
                doc {
                    Stores NTTP packet header field Addr (LSBs) of the logged error
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_01 @0x24 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_ErrLog5 @0x28 {
            bytes 4;
            field ERRLOG5 @'h0 {
                bits 27;
                access ro;
                hard_reset 'h0;
                doc {
                    Stores NTTP packet header field User (LSBs) of the logged error
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_02 @0x2C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_03 @0x30 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_04 @0x34 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_StallEn @0x38 {
            bytes 4;
            field STALLEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Set to 1 to enable stall mode behavior.
                }
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_05 @0x3C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_06 @0x40 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_07 @0x44 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_08 @0x48 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_09 @0x4C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_10 @0x50 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_11 @0x54 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_12 @0x58 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_13 @0x5C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_14 @0x60 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_15 @0x64 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_16 @0x68 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_17 @0x6C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_18 @0x70 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_19 @0x74 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_20 @0x78 {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdf_observer_main_ErrorLogger_0_Reserved_21 @0x7C {
            bytes 4;
            field cdf_observer_main_ErrorLogger_0_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdma0_cdf_axi_I_main_QosGenerator @0x7800 {
        bytes 4;
        register cdma0_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hf84ebf;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma0_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field cdma0_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block cdma1_cdf_axi_I_main_QosGenerator @0x7880 {
        bytes 4;
        register cdma1_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hab85e9;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register cdma1_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field cdma1_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip0_cdf_axi_I_main_QosGenerator @0x7900 {
        bytes 4;
        register sip0_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h49cd99;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip0_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip0_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip1_cdf_axi_I_main_QosGenerator @0x7980 {
        bytes 4;
        register sip1_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hf84864;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip1_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip1_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip2_cdf_axi_I_main_QosGenerator @0x7A00 {
        bytes 4;
        register sip2_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h783ba7;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip2_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip2_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip3_cdf_axi_I_main_QosGenerator @0x7A80 {
        bytes 4;
        register sip3_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h325930;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip3_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip3_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip4_cdf_axi_I_main_QosGenerator @0x7B00 {
        bytes 4;
        register sip4_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h44f4bc;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip4_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip4_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip5_cdf_axi_I_main_QosGenerator @0x7B80 {
        bytes 4;
        register sip5_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'hae497c;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip5_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip5_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip6_cdf_axi_I_main_QosGenerator @0x7C00 {
        bytes 4;
        register sip6_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h9c33db;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip6_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip6_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
    block sip7_cdf_axi_I_main_QosGenerator @0x7C80 {
        bytes 4;
        register sip7_cdf_axi_I_main_QosGenerator_Id_CoreId @0x0 {
            bytes 4;
            field CORETYPEID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h4;
                doc {
                    Field identifying the type of IP.
                }
            }
            field CORECHECKSUM @'h8 {
                bits 24;
                access ro;
                hard_reset 'h9d094c;
                doc {
                    Field containing a checksum of the parameters of the IP.
                }
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Id_RevisionId @0x4 {
            bytes 4;
            field USERID @'h0 {
                bits 8;
                access ro;
                hard_reset 'h0;
                doc {
                    Field containing a user defined value, not used anywhere inside the IP itself.
                }
            }
            field FLEXNOCID @'h8 {
                bits 24;
                access ro;
                hard_reset 'h84f8c6;
                doc {
                    Field containing the build revision of the software used to generate the IP HDL code.
                }
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Priority @0x8 {
            bytes 4;
            field P0 @'h0 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the LOW hurry level. In Fixed/Limiter mode, defines the Urgency level for WRITE transactions.
                }
            }
            field P1 @'h8 {
                bits 3;
                access rw;
                hard_reset 'h0;
                doc {
                    In Regulator mode, defines the HIGH hurry level. In Fixed/Limiter mode, defines the Urgency level for READ transactions.
                }
            }
            field MARK @'h1f {
                access ro;
                hard_reset 'h1;
                doc {
                    Backward compatibility marker when 0.
                }
            }
            doc {
                Priority register.Priority register.
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Mode @0xC {
            bytes 4;
            field MODE @'h0 {
                bits 2;
                access rw;
                hard_reset 'h3;
                doc {
                    Functional Mode: 0=Fixed, 1=Limiter, 2=Bypass, 3=Regulator.
                }
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Bandwidth @0x10 {
            bytes 4;
            field BANDWIDTH @'h0 {
                bits 16;
                access rw;
                hard_reset 'h5ed0;
                doc {
                    Defines the bandwidth threshold in 1/256th-byte-per-cycle units. In other words, the desired rate in MBps is divided by frequency in MHz of the NIU, and then multiplied by 256.
                }
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Saturation @0x14 {
            bytes 4;
            field SATURATION @'h0 {
                bits 10;
                access rw;
                hard_reset 'h8;
                doc {
                    Defines the size of the bandwidth counter, that is, the measurement window, in 16-byte units. In other words, the desired number of bytes divided by 16.
                }
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_ExtControl @0x18 {
            bytes 4;
            field SOCKETQOSEN @'h0 {
                access rw;
                hard_reset 'h0;
                doc {
                    Register field SocketQosEn determines how priority levels are driven when QoS generators and socket interfaces alternatively drive the levels for Urgency, Pressure, and Hurry signals: When set to 0, the QoS generator drives the levels. When set to 1, internal signals Pressure and Hurry are driven by the greater of the two levels from the socket interface or the QoS generator.
                }
            }
            field EXTTHREN @'h1 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtThrEn is set, internal signals Urgency, Press and Hurry are driven, when input signal ExtThr is low, by the value in register Priority field P0. When ExtThr is high, they are drven by the value in register Priority field P1.
                }
            }
            field INTCLKEN @'h2 {
                access rw;
                hard_reset 'h0;
                doc {
                    When set to 1, register field IntClkEn causes the QoS generator to use the NIU clock for bandwidth calculation. When set to 0, and if configuration parameter useExternalReference is set to True, an external reference clock at the socket is used for bandwidth calculation.
                }
            }
            field EXTLIMITEN @'h3 {
                access rw;
                hard_reset 'h0;
                doc {
                    When register field ExtLimitEn is set, the bandwidth limiter is enabled when input signal ExtThr is asserted. When the signal is not asserted, the limiter is disabled: bandwidth is not limited, and the counter is stuck to 0. When the bit is cleared, the limiter operates normally and ignores ExtThr.
                }
            }
            doc {
                External inputs control.External inputs control.
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_00 @0x1C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_00 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_01 @0x20 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_01 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_02 @0x24 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_02 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_03 @0x28 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_03 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_04 @0x2C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_04 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_05 @0x30 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_05 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_06 @0x34 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_06 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_07 @0x38 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_07 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_08 @0x3C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_08 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_09 @0x40 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_09 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_10 @0x44 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_10 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_11 @0x48 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_11 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_12 @0x4C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_12 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_13 @0x50 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_13 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_14 @0x54 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_14 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_15 @0x58 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_15 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_16 @0x5C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_16 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_17 @0x60 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_17 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_18 @0x64 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_18 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_19 @0x68 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_19 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_20 @0x6C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_20 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_21 @0x70 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_21 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_22 @0x74 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_22 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_23 @0x78 {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_23 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
        register sip7_cdf_axi_I_main_QosGenerator_Reserved_24 @0x7C {
            bytes 4;
            field sip7_cdf_axi_I_main_QosGenerator_Reserved_24 {
                bits 32;
                access rw;
                hard_reset 'h0;
            }
        }
    }
}

